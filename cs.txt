OWASP :- Open web appication security project.

owasp - open web application security project (Testing)(Framework)

vulnerability :- 
----------------

---> It is a flaw in a system that can leave it open to attack.

Exploit :-
----------

---> it's a piece of software that takes advantage of a bug and causes unintented or unanticipated behavior.

VA vs PT :- Vulnerability Assesment vs Penetration Testing (Pen testing)
-----------

---> Finding the vulnerability is called vulnerability assesment.

---> To find and exploit vulnerabilities in a computer system is called penetration testing.


Security Testing Methodology :-
-------------------------------

1. Planning
2. Gathering information
3. Discovering Vulnerabilities
4. Reporting.


Web Application Testing Methodology :-
--------------------------------------

1. Information gathering
2. Planning
3. Vulnerability Detection
4. Penetration Testing
5. Reporting.

Application Penetration Testing Methodology :-
---------------------------------------------

1. Information Gathering
2. Threat Modeling
3. Vulnerability Analysis
4. Exploitation
5. Post Exploitation
6. Reporting.

---> DAST/Blackbox - Dynamic Application Security Testing.

---> If we dont know anything about the application and trying to comprimise the application is called DAST.
 
---> SAST/WhiteBox :- Static Application Security Testing.

---> Here we know about the application like sorce code plugins and ETC and trying to comprimise the application is called SAST.


Web Application :-
------------------

---> The web application is a program that performs any specific fuction using a web browser.

---> Web applications are usually coded in browser supported language such as Javascript and HTML.


Web Application Vs Website :-
-----------------------------

Web Application :- We can do some actions like login,acess the data and ETC.

Website :- We can get the information. But cant do any actions.

Methods :-
----------

GET :-
------

---> GET Method is used to request the data from specified resource.(It is used to retrive the data from server)

---> GET requests can be cached.

---> GET request remain in browser history.

POST :-
--------

---> POST method is used to send data to server.

---> POST method is used to create a resource.

---> PUT method is used to update resource.

HTTP Headers :-
---------------

---> The HTTP Headers are 4 types :-

1. General Header

2. Client-Request Header

3. Server-Response Header

4. Entity Header.

---> General Header :- The headers which are present in both request and response is called general header.

---> Client-Request Header :- It is applicable for client requests.

---> Server-Response Header :- It is applicable for your server responses.

---> Entity Header :- Its tells about body meta data.

Cookies :-
----------

---> Cookies are small files that the website store on your computer to identify you quickly.

---> Inside the cookie we have session Id.

* HTTP is stateless. It wont remember you. Thats the reason we use cookies.

---> Cookies can store your credentials for some time.


RECON (Phase - 2) :-
--------------------

---> Recon is nothing but a information gathering.

---> Reconnaissance is a set of processes and techniques used to covertly discover and collect information about a target system.

---> There are two types of recons :-

1. Active Recon
2. Passive Recon

---> Active Recon :- In this, we are directly intract with application and gain the information.

---> This information is relevant and accurate.

---> It is risky process.

---> Passive Recon :- In this, we are indirectly intract with application and gain information.

---> In this recon we get the information from publicly available sources.

---> It is not risky.

---> Netcraft - It is a website, Here we get some information like hostnames, Ip addresses and ETC.

Eg :- https://sitereport.netcraft.com/

---> Whois Lookup 


Dorking :- 
----------

---> How google search works is 

1. URL - https://annualreport.stocklight.com

2. Title - HP Annual Report 2022

3. Text - HP Annual Report 2022. Form 10-K (NYSE:HPQ). Published: December 6th, 2022

---> Inurl - It looks for mentioned words inside the URL of any websites.

Eg :- ajio.com inurl:login

---> Intitle - It searches for any specfic word inside the page title.

Eg :- ajio.com intitle:shirts

---> Intext - It can perform queries helps to search for specfic text inside any page.

Eg :- ajio.com intext:price

---> Filetype - You can use this dork to find any kind of filetypes.
 
Eg :- hp annual reports filetype:pdf


---> If we want to see sub domains then we can use VIRUSTOTAL Website and DNSdumpster.com

---> GHDB - Google Hacking Database.

Censys.IO :-
------------

---> Censys is a platform that helps to find the information about security practitioners discover, monitor, and analyze devices that are accessable from the internet.


Installation of Kali linux :- 
----------------------------

1. Download the latest version of virtual box.

2. Extract the kali linux zip file.

3. Open the extracted file and select the linux file with 3kb. Its done.

---> Default user name - Kali

---> Default password - Kali

---> "Whatweb" is an command that we uses in CLI to find the information about applications such as IP addresses, HTTPserver Name, Cookies, Protocols, Scripts, Title and ETC.

---> While using this command extention is mandatory. (.com, .org, .in).

Eg :- whatweb facebook.com, whatweb flipkart.com


---> Wappalyzer - It is simple browser extenstion.

---> It is a tool to gather information about application.



Dirbuster :-
------------

---> It is directory penetration testing tool. it finds all directories in web application.

---> It is a brute force directories and files names on web/application servers.

---> It identifies the directories with the help of wordlist file. we can find the wordlist file in - Filesystem ---> Usr ---> Share ---> wordlists ---> Dirbuster ---> directory list.

---> brute force :- Attackers using excessively forceful attempts to gain access to user accounts.

Usage :-
--------

---> Target URL - Here we need to give URL that we want to search.

Eg :- http://testfire.net

---> File with list of dirs/files ---> Here we give the path of wordlists.

---> Eg :- Filesystem ---> Usr ---> Share ---> wordlists ---> Dirbuster ---> directory list.


LBD :- 
------

---> LBD - Load Balancer Detector.

---> It is a simple tool to find about any application using load balancer or not.

---> Eg :- lbd flipkart.com


Wafw00F :-
---------

---> It is a simple tool to find about any application using firewall or not.

---> Eg:- wafw00f dell.com


nmap :-
------

---> nmap :- Network mapper. Nmap is used to identify the live hosts, ports and os versions that applications using.

---> By default nmap checks only 1000 well known ports.

---> If we didnt mention any scan type than default scan is SYN Scan. 

---> There are two types of scans :-

1. Syn Scan

2. TCP Scan

---> SYN Scan :- This scan is two way handshake (1.Syn packet, 2.Syn ack)

---> Before using the Syn scan make sure that we need root privileges. For that use this command to switch to root account - sudo su.

---> Syn Scan is faster.

---> Eg :- nmap -sS testfire.net (nmap -> Command, -s -> Here we mention the scan type, testfire.net - Here we need to mention website name).

---> TCP Scan :- This scan is three way handshake (1. Syn packet, 2. Syn ack, 3. Response Acknowledged)

---> Eg :- nmap -sT testfire.net

---> To do TCP scan we don't need root privilegs.


Zenmap :-
---------

---> It is same as nmap but it is GUI.

---> To see the IP address in kali linux we use this command - ifconfig. In windows the command is ipconfig.

---> nmap -sV 10.1.10.88/24  ---> nmap ---> command, -s Scan type, -V ---> It shows the version(Need to use caps V), 10.1.10.88/24 ---> website IP.

---> nmap -sV -A -O 10.1.10.88/24 ---> nmap -> command, -s Scan type, -V --> It shows the version(Need to use caps V), -A,-O ---> It shows the OS and OS version (Here we can use 'A' or 'O' both shows the same content), 10.1.10.88/24 --> website IP.

---> nmap -p 3000-4000 10.1.10.80 ---> nmap -> command, -p ---> it shows the ports(If you want check between specfic ports from 3000 to 4000), 10.1.10.88/24 --> website IP.

---> Eg :- nmap -p 1-65535 10.1.10.80

---> nmap -p 1-65535 -T5 10.1.10.80 ---> nmap -> command, -p ---> it shows the ports(If you want check between specfic ports from 3000 to 4000), -T5 ---> If we want to scan more faster we use this(T stands for timing templates), 10.1.10.88/24 --> website IP

---> T0 - Paranoid
---> T1 - Sneaky
---> T2 - Polite
---> T3 - Normal
---> T4 - Aggressive
---> T5 - Insane.


Discovering vulnerabilities (phase - 3) :-
------------------------------------------

A2 - Broken Authentication :-
-----------------------------

Authentication :-
-----------------

---> Authentication is nothing but verifing the identity.

---> We can identify the users by thier username and password.

HTTP Basic Authentication :-
----------------------------

---> In this method client always provide the username and password when making the request.

---> For every request username and password will send to server, that will send by Authentication header.

** Authentication : Basic Base64(Key) ---> If we see Authentication header along with basic than it is called HTTP Basic Authentication.


Encoding :-
-----------

---> Converting your data into another format. Here we use base64.

---> Eg :- ToBase64 - Pranith, FromBase64 - UHJhbml0aA==

---> Eg :- original format - 125485abc  Encoded format - cdcsd6554dfsdvd5sd4


Encryption :-
-------------

---> Converting your data into cipher text. (AES)

---> It is two way process encrypt and decrypt.

---> Eg :- AES Encrypt - Pranith(input), AES Decrypt - 62437b89a709277468362ca9ea7e9b60(Output) 


---> In AES encrypt 128 bit key contains 32 charcters. (16 bytes = AES-128)

---> In AES encrypt 192 bit key contains 48 charcters. (24 bytes = AES-192)

---> In AES encrypt 256 bit key contains 64 charcters. (32 bytes = AES-256)

---> For all bits IV contains 32 charcters.

Hashing :-
----------

---> Conventing your data into different format. (SHA512 - Secure hasing algorithm)

---> It is one way process.


---> To do these actions we use "Cyberchef" - (Web Application).


Cookie Based Authentication :-
------------------------------

---> In cookie based authentication cookie is the header.

---> Cookie is created by server.

---> Cookie contains session ID.

---> Session Id is unique for everyone.

---> Session Id has expiration date.

---> When browser send request to server, Sever put the SET Cookie header.

Cookies vs Local Storage :-
---------------------------

---> All the cookies will store at cookie storage or cookie jar.

---> Cookies are safe when we store in local storage.

---> if you want to see a cookie in browser, open any application ---> Right click and select inspect option ---> goto console ---> use this command document.cookie. (We get the cookie)

---> Cookies are stored in browser as well as sever also.

Token Based Authentication :-
----------------------------

---> In token based authentication everthing is stored locally, The server stores only signature.


** Authentication : Bearer : Base64(Key) ---> If we see this kinda authentication than it is a Token based authentication.

---> The popular token based authentication is JWT (Jason Web Tokens).

---> Token is more lengthy than cookie.

---> JWT has there components they are :- (HPS)

1. Header

2. Payload

3. Signature

---> To encode the JWT we have one web application called "JWT.IO" .


---> Tokens has more expiration time than cookies. Which is not good.

---> Token never stored in server. Server stores only signature.


Brute force attacks using burp :- Test Cases :-
---------------------------------

Using Default Usernames and passwords :-
---------------------------------------




Username Enumeration through password reset :-
----------------------------------------------

---> Finding the username or email id is called username enumeration.

---> There are three ways :-

1. Password Reset

2. Login Page

3. Sign Up page.

---> First we need to know weather the username or email id is already existing or not.

---> Open any website (Snapchat) and press login and give any random username to check is it available or not.

---> If the given username is not found we get a message like this "We cannot find an account for this email address" ---> If we get this kinda response than we knew that user is not existing.

---> If you gave an username and if we get a message like this "If we have an account for the username or email address you provided we have emailed a link to reset your password." ---> If we get this kinda response than we did not know that user is existing or not. (Perfect Implementation)

---> If we want check multiple user combinations we can use burp.

Login page user enumeration :-
------------------------------

---> In this enumeration we can find weather username or email id existing or not at sign up page.

---> While creating the user we need to give the information Like Name , emailid etc at the creation time, If it already availble than we know that user is already existing.

Ensure if the data is sent through a secure channel :-
------------------------------------------------------

---> Post method is used for sending the data and it is secure.

---> We can change Post method into GET method by using burp tool. It has a default option.

---> If the data is send in GET method then that application has vulnerability.

---> Using HTTPS

Session Invalidation (Using Cookies - Pre & Post Logout) :-
----------------------------------------------------------

---> If we logged out from the session and still we are seeing the same data than it is called session invalidation.

---> If we logged out from the session than cookies also be deleted, If the cookies still availble than that application has vulnerability. 

Account Lockout :-
------------------

---> If we enters the wrong password for multiple time than the account got locked.

---> It is more like prevention technique. To stop the brute force attacts.

Password change does not require current password :-
----------------------------------------------------

---> A current password is a code that you use when logging ​on to your ​computer or online accounts.

---> If we want to change password then application asks to enter your current password and new password and re-enter password.

---> If the current password is wrong than application wont accepts and it displays the message ("Old password is incorrect"). [Good Implementation]

---> If you want to change a password for any application, If that application wont asks for current password and accepts to enter new password than it is bad implementation.


Insecure Forgot password functionality :-
-----------------------------------------

---> If we are using shared system than we use this kinda attack.


ClearText Transmission of session token/Session token in URL :-
---------------------------------------------------------------

---> If the session Id is visable in URL than that application is not secure. (Bad Implementation)


Post Authenticated URL's :-
---------------------------

--->  If we login into any application (Flipkart) and added some items to wishlist and agian logged out. If anyone copy the login URL and try to login with that URL after you logged out and it shows your information than it is bad implementation.

---> Once we logged out from application, again trying to login with old url than application should redirects to login page, If it does than it is secure.


A1 : Injection :-
-----------------

SQL INJECTION :- SQLI
----------------

---> SQL ---> Structured query language.

---> Database is a collection of tables, Table is collection of rows and coloumns.

---> If i want to get all the data than we use this query "Select *"

Eg :- Select * from student;

Eg :- Select * from student where id='2';

Eg :- Select * from student where Sbranch='CSE';


Types of SQLI's :-
------------------

1. Error based SQL injection

2. UNION-based SQL injection

3. Blind SQL injection

4. Out-of-band SQL injection.

Error based SQL injection :- In this type of injection first we need to find the vulnerability.
----------------------------

Eg Site :- https://www.lghk.com/index.php

---> https://www.lghk.com/product.php?id=121 ---> If we see URL like this in the end id we can add semi colon. (https://www.lghk.com/product.php?id=121')

---> At the end if we add any special charcters like (') than we get syntax errors. There is a posibility to know about information.

Eg :- https://www.lghk.com/product.php?id=121' If we add extra charcter there we get this error.

---> You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''' at line 1 (Error massage)

Order By :-
-----------

---> Find how many coloumns in that application, and find which coloumn is vulnerable to do SQLI.

---> To find how many coloumns is available we use order by.

---> if we find any vulnability in error based sqli than we do Order by.

---> Eg :- https://www.lghk.com/product.php?id=121&pid=0 order by 18

Union Based SQL Injection :-
----------------------------

---> To find which coloumn is vulnerable we use union select.

---> Union select basically combines two or more tables (Select statements) and 
getting the data.

---> https://www.lghk.com/product.php?id=121&pid=-0 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17+--

---> In this we found 16 coloumn has vulnerability.

---> So now we need to give input in vulnerable coloumn.

---> To find the version of DB we can do like this.

Eg:- https://www.lghk.com/product.php?id=121&pid=-0 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,@@version,17


** Hashes.com --> It decodes the hash and gives us passwords.

---> Step - 1 ---> Inject a single quote (') or double quote (") .

---> Step - 2 ---> Find the number of coloumns by using Order By

---> Step - 3 ---> Union select to find vulnerability.

---> Step -4 ---> After getting vulnerable coloumn, than inject the queries and get the data.


Blind SQL Injection :-
----------------------

---> There are two types :-

1. Boolean Based

2. Time Based

Boolean Based :-
----------------

---> 1' or 1=1-- 

---> OR Gate - If any thing is true, It is true.

---> AND Gate - If any thing is wrong, It is wrong.

Time Based :-
-------------

---> In this injection we are communicating with database with an time interval.

---> In this we stop the database for a while.

---> We are asking the database to respond after 10 seconds.

---> Payload box -- github/payloadbox.


DVWA :-
-------

---> DVWA - Damn vulnerable web application.

---> DVWA is used to practice hacking techniques and tools.

---> In DVWA security we can select the security modes.

** After installation of DVWA, If you want to restart the DVWA, Open terminal and reload the server for that we use this command.

---> Command - sudo service apache2 start, sudo service apache2 reload.

---> Now open it in browser and give the Ip address - 127.0.0.1/Dvwa.

SQL MAP :-
----------

---> sqlmap is an automated tool.

---> sqlmap -d - It is command used for domain.

---> sqlmap -u - It is for URL.

Eg :- sqlmap -u http://127.0.0.1/DVWA/login.php

Eg :- sqlmap -u "http://127.0.0.1/DVWA/login.php" --cookie="PHPSESSID=dghgsgs56sg6" ---> This command is used to know the database.

---> sqlmap - Command

---> -u - Represents the URL.

---> http://127.0.0.1/DVWA/login.php - here we give the URL in double quotes.

---> --cookie="PHPSESSID=dghgsgs56sg6" - Here we give the cookie with session id.

Eg :- sqlmap -u "http://127.0.0.1/DVWA/login.php" --cookie="PHPSESSID=dghgsgs56sg6" --dbs

---> --dbs - It gives the information about all databases.

Eg :- sqlmap -u "http://127.0.0.1/DVWA/login.php" --cookie="PHPSESSID=dghgsgs56sg6" -D DVWA -T users.

---> -D - Here mention the database. (Caps D means database)

---> -T - Here we can search for tables (Caps T)

---> Users - Name of the table.

** plus symbol (+) :- Concatenante

** question mark Symbol (?) , And Symbol (&) :- Parameter.



A3 - Sensitive Data Exposure :-
-------------------------------

---> The data which identifies the person is Personally Identified Information. (PII)

---> There are different types of data :-

1. Personally Identified Information (PII) - Personal info like contact number, address ETC.

2. Financial Information - Card Numbers, Back account details, Expire dates and CVV numbers.

3. Health Information - Health conditions, treatments and medical records.

4. Intellectual Property - 

5. Competition Information - Selling your product to other competitors before the product lauch.

6. Legal Information - 

7. IT Security Data - UserNames, Passwords, Encryption keys, network structure ETC.

GDPR :-
-------

---> GDPR - General Data Protection Regulation - It is an european law.

Test Cases :-
-------------

1. Testing for password & Cryptographic storage - Data at Rest.
-----------------------------------------------

---> In this we see weather user name and passwords are sending in cryptographic form or not.

--->  If the data is not sending in cryptographic form than the application has vulnerability.

---> In this test case we dont have a access to database. so this test case is not possible to do.


2. Testing For HSTS (HTTP Strict Transport Security) :-
------------------------------------------------------

---> Any website if you try to access it on HTTP, It will convert into HTTPS. (Strict Transport Security)

---> Strict Transport security is header, If that header is not found then the data transports in other protocols.

---> In Burp we can capture the request and send it to repeater there we can change the protocol on target and than check for that header.

---> If that header is available it redirects from HTTP to HTTPS.


3. Testing For Cryptography :-
------------------------------

---> Converting your plain text into cryptographic format.

---> Testing for password & cryptographic storage :- The passwords will store in different encrypted formats. 

Eg:- SHA,AES, Salting and ETC. 

---> Salting means it adds the prefix and suffix to your password.

Eg :- Actual password - Pranith123  Salted password - ABCPranith123XYZ. (ABC - Prefix), (XYZ - Suffix).


Cookie Flags :- 
---------------

1. HTTPonly - If we have this type of flag we can not access the cookie using java Script.

2. Secure - This flag is used to, It sends the cookie in encrypted format not in plain text format.

---> If secure flag is set it in false state than that cookie is in unencrypted state. It goes in plain text only.


Testing for Weak Transport Layer Security :-
--------------------------------------------

---> Transport layers are SSL and TLS.

---> TLS 1.2 and 1.3 are latest versions and vulnerability free.

---> To check weather SSL and TLS are using cipers or not, To do that we use "SSLlabs.com"

---> In kali linux we can check that the website supports which TLS is using.

Eg :- nmap --script ssl-enum-ciphers -p 443 testfire.net

Eg :- nmap --script ssl-enum-ciphers,ssl-cert,ssl-heartbleed -p 443 testfire.net


Unmasked NPI/PII/PHI - How is your card data is sending in website :- (NPI - Non - Personal information)
--------------------------------------------------------------------------

---> Login to website and order any item goto checkout and pay page, There it will asks for your personal data.

---> For test cards we use this website - https://coolgenerator.com/credit-card-generator.

---> After giving the credit card details open the burp and capture the request.

---> Check weather card details are sending in encrypted format or not.


A6 - Security Misconfigurations :-
----------------------------------

Test Cases :-
-------------

1. Directory Listing - Index of / :-
------------------------------------

---> In directory listing we can see all directories in web application.

Eg : index of peaky blinders

---> To see the directories in web, we use this in URL (wp-content/uploads/)--> Use this in the end of the URL.

Eg :- https://www.bigsmartdeals.com/wp-content/uploads/  [WP - Word press].

---> If directory listing disable on any website we get 403(Forbidden) error.

Eg :- https://vardhaman.org/robots.txt

---> This gives the data about allow or disallow


2. Exposed Backup or Configuration Files :-
--------------------------------------------

---> This test case is used to find the backup files and configuration files of web application.

---> To find these files we can use burp. In burp we can add multiple extensions in extensions tab.

---> In extensions tab we can add the backup finder extension.

---> Goto this link - https://github.com/moeinfatehi/Backup-Finder ---> goto releases and there you find file called Backup-Finder.jar --> Download that file and add in extensions.

---> Open Burp ---> Capture the request ---> Right click and goto extentions ---> Backup finder.jar ---> Send to backup finder ---> Start.

3. Default credentials :-
-------------------------

---> Try to login with default credentials like admin/admin, admin/123 ETC.

4. Error Handling And Stack Traces :-
-------------------------------------

---> In this test case enter any gibberish data and see if it gives any response or not.


5. Missing Security Headers :-
-------------------------------

---> There are 4 main headers

1. Strict Transport Security

2. X-Frame Options

3. X-XSS Protection

4. Content Security Policy


Strict Transport Security :-
-----------------------------

---> This header will convert all HTTP requests into HTTPS.



X-Frame Options :-  Click jacking
------------------

---> In this header the value should be in Deny or same origin state.

---> Same Origin means it should match three constrains Protocols, Port Number and domain. these 

---> If this header is not available than that site is vulnerable to do click jacking.

---> Take the code and save it in notepad and in Iframe option give your URL and save the with .HTML extention (Eg :- Clickjacking.html).

---> Code for click jacking.

<html>
    <head>
        <title>Clickjack test page</title>
    </head>
    <body>
        <iframe src="http://www.target.site" width="500" height="500"></iframe>
    </body>
</html>

---> If any site loaded in I frame than vulnerable for click jacking.



X-XSS Protection :- 
-------------------

---> In this header the value must be 1(True) not 0(False).

---> This header stops the loading from excessive attacts.

---> If content security policy is available than X-XSS protection is not mandatory.

Eg :- X-XSS Protection : 1; mode = Block



Content Security Policy :- 
---------------------------

---> The purpose of Content Security Policy is, we can say that where your resources can load from.

---> If we dont know the code then use CSP Evaluator in browser.

---> Capture a request in burp and check for this header. If it is not available than we can give it as missing security header.


6. Version Disclosures / Sensitive Info Leak In Response Headers :-
-------------------------------------------------------------------

---> Capture the request in Burp and send it to reapeter and search for any header showing the versions of thier application.

Eg :- Sever Header : Apache  --> Secure

Eg :- Sever Header : Apache 2.1.8 --> Not secure.

---> If it shows the info in reponse headers than that site is vulnerable.


7. Outdated Software / Libraries :-
------------------------------------

---> In this test case first we need to find the which version is currently the application is using. 

---> To know that we can use wapplyzer or netcraft ETC.

---> If the application using the older versions than there is a chance to have vulnerabilities.

Eg :- Currently Application using version - Cloud Flare 1.2.10

Eg :- Latest version in market - Cloud Flare 2.1.3

---> If the application is not using latest versions than we can say that application is using outdated versions.


A7 - Cross Site Scripting (XSS) :-
----------------------------------

---> There are three types of XSS :-

1. Stored or Persistent XSS

2. Reflected or Non-persistent XSS

3. DOM-Based XSS

---> Cross site scripting (XSS) is a client side code injection attack.
 

Stored or Persistent XSS :-
---------------------------

---> In stored xss the injection is stored in database permenantly. until it got deleted by developer

---> Where do we perform cross site scripting ?

---> We can perform on web page where ever we have input fields.

---> This is a payload to stole the cookie.

Eg :- <script>alert(document.cookie)</script>

Eg:- <script>alert(document.domain)</script>


---> Give those example payloads in input field like search bar, username and ETC.

---> In this process we can see our own cookies.

---> Always try to set HTTPONLY flag to TRUE. So that attacker can't get the cookies.

---> If you want to see the others cookies than run the malicious java script in others browser.

---> To do that, when we gave this <script>alert(document.cookie)</script> payload in our input field and search one URL got generated, Copy that URL and send to other person than we are able to see others cookies.


** Payload box - where we can find all payloads.


Reflected or Non-persistent XSS :-
----------------------------------

---> In reflected XSS is wont store anywhere. It is valid for only a particular request. (Like link form)

---> Give the payload in input field and check the URL and copy that URL and send it to others.

---> If we want to change the URL apperance we also use bit.ly website.

Eg :- <script>alert(1)</script> --> If we give this payload in input field.

---> http://testfire.net/search.jsp?query=%3Cscript%3Ealert%281%29%3C%2Fscript%3E ---> We get this URL.

Eg :- <script>alert(document.cookie)</script>  ---> To steal cookie we use this payload.


DOM-Based XSS (Document Object model) :-
----------------------------------------

---> 



Cross Site Request Forgery (CSRF) :-  OWASP 2013
------------------------------------

---> CSRF is an attack that affects an end user to execute unwanted actions on web application.

---> Sending a link via message, an attacker may trick the users of web application.

---> In this attack we can update or change the user details without thier involvement or in bank sites we transfer the amount without thier credentials. (Depends on application functionality)

---> In this attack we need two pre-requisites.

1. User must be in Logged in state

2. Click on particular link

---> Goto any web application and create a account

Eg :-
------

---> Open testfire ---> Login to testfire ---> transfer Funds ---> Select the from account and to account and amount to transfer ---> Before clicking transfer money captute the request in burp and send that request to repeater.

---> Copy that request and open CSRF PoC Generator and change the values in request and save it in HTML format.

---> Most important thing after saving that file again open that file in same browser where you already logged in.

---> CSRF Poc Generator Link - https://tools.nakanosec.com/csrf/?source=post_page-----db464a61a582--------------------------------


A5 - Broken Access Control
--------------------------

---> Authentication - Proving the identity

---> Authorization - Proving the access (What kind a permission i have)

* Authorization comes after authentication.

---> To do authorization testing atleast we need 2 or 3 accounts.(Admin account,manager account, 2 normal users accounts)

---> Broken access control has 4 types vulnerabilities :-

1. Forced Browsing

2. File Includes/ Directory Traversal/ Path Traversal

3. Privilege Escalations

4. IDOR (Insecure Direct Object References)


Forced Browsing :- 
------------------

---> Forced browsing means where we can access a functionality which we dont have.

---> Goto testfire.net ---> To do force browsing we need two or three accounts. So login with admin and jsmith credentials.

---> After logged into two accounts see for the different functionalities.

 ---> Admin has edit users option ---> open that option ---> copy that link and paste that link other users login (See if it is vulnerable or not)

---> Take two accounts ---> Look for uncommon functionality in both accounts ---> After finding that uncommon functionality ---> Copy the URL of that umcommon functionality and paste it in other user account.

---> If we got error (403 forbidden) doing forced browsing, capture the request in burp ---> Goto proxy ---> Turn the interceptor on ---> Capture the request ---> Right click and Do intercept --> Response to this request. (This option is used for capture the response from browser)


Privilege Escalations :-
------------------------

---> In privilege escalations we have two types.

1. Vertical Privilege Escalation

2. Horizontal Privilege Escalation


Vertical Privilege Escalation :-
--------------------------------

---> From lowest privilege user to highest privilege user.

Eg :- If normal user getting manager privileges than it is called vertical privilege escalation.

Eg :- If manager getting senior manager privileges than it is called vertical privilege escalation.


Horizontal Privilege Escalation :-
----------------------------------

---> Gaining access to the rights of another account or machine with similar privileges.

---> HPE will happend between similarly configured accounts.


File Includes/ Directory Traversal/ Path Traversal :-
-----------------------------------------------------

--->  In this test case we need to find the directories of web application.

---> Traversal - Moving from one directory to another directory.

---> To change the directory we use this command (../../) --> Backside.


---> First check the application in Wappalyzer if it shows any application using Apache server or Nginx than that application is using Linux operating system.

---> Linux - Apache, Ngnix (/etc/Passwd - Check this Path for linux OS)

---> Windows - ISS (C:\windows\win.ini - Check this Path for windows OS)

---> Where ever we have input fields we can try to put this ../

---> See for the request parameters in URL. Parameters are starting with (?) symbol. To represent multiple parameters we can use (&) symbol.

---> If parameters are not sending in URL then go and check in view page source.

Eg :- View page source --> CTRL F --> ?

---> After finding the parameters search that parameters in URL.

---> Search for path parameter.

---> In end of URL put ?path=../../  search.

Eg :- URL End?path=../../../../etc/passwd

Eg :- URL End?path=../../../C:/windows/win.ini



IDOR (Insecure Direct Object References) :-
-------------------------------------------

---> If we use insecure way to predict the user id or information is called IDOR.



Business Logic vulnerabilities :-
---------------------------------

---> Business logic vulnerability is araised due to design flaws.

---> Price manuplation, Cutomization ETC.

---> Automation tools cant find the business logic vulnerabilities.



A4 - XML External Entities :-
-----------------------------

XML External Entity Injection (XXE) :-
--------------------------------------

---> XXE web security vulneability that allows an attacker to interfere with an application processing of XML data but not Json data.

---> There are two methods of transporting the data.

1. XML (Extensible Markup Language)

---> In XML data is transfered between tags.(<>(Starting), </>(Ending))

Eg :- <html>

</html>

---> XML is used to store and transport the data.


2. Json (Java script objecct notation)

---> In json data is transfered in key-pair values.

Eg :- 
{
 "user" : {
   "name" : "lambert"
   "bio"  : "The cook"
  }
}

---> The above code is in json format. Any thing start with curly braces and ends with curly braces than it is json format.

---> If we dont know in which format the data is transfering, Than capture the request in burp and look for content typer header.

---> Content types header give the info about in which language data is transferring.

Eg :- Content-Type : Application/json

Eg :- Content-Type : Application/xml


XML Entities :-
---------------

---> XML entities represents the open and close tags.

---> < - less than symbols denotes as &lt.

---> > - Greater than symbol denotes as &gt.

---> Whatever data is written in between the tags(&lt and &gt) are called entities.

Parser :-
---------

---> The parser is responsible for checking the syntax.


Document Type Definition (DTD) :-
---------------------------------

---> The purpose of DTD is to define the structure of XML document.


Process To Do :-
----------------

---> First need to check the data is transfering in XML or Not.

---> Second find if it process the xml entitites or not.

---> By using entities we can expose the sensitive data.
 
---> Goto XXE payload box.

---> Select any payload in payload box and paste it in burp.

---> DTD name (Eg :- <!DOCTYPE Hack [<!ENTITY first SYSTEM "File:///etc/shadow">"]> ) (Hack is DTD name)

---> if any thing in xml if we want to reference than we this symbol (&).

---> Now check all the entities one by one.

Eg :- <!DOCTYPE Hack [<!ENTITY first SYSTEM "File:///etc/shadow">"]> ) (first is the entity)


---> If the application is sending data in json format we can convert json in XML format.

---> To convert json to XML goto google and search for json to xml converter.

---> We can do that burp also, In extensions tab we can add this content type converter extension.



Server Side Request Forgery (SSRF) :-
-------------------------------------

---> SSRF is a web security vulnerability.

---> Firewall and Load balancer (Internet). Web application, Application Server, Database server (Intranet) --> We are trying to comprimise the intranet components.

---> SSRF attack is designed to target the server.

---> Whenever one application inter connects with other application than we can perform the SSRF.

